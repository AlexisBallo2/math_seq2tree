import matplotlib.pyplot as plt


def make_loss_graph(data, filename, title, xlabel, ylabel):
    plt.ylabel(ylabel)
    plt.xlabel(xlabel)
    plt.title(title)

    plt.plot(data)
    # plt.plot(data)
    # plt.plot(validationLoss)
    # plt.figlegend(['Train', 'Test'], loc='upper left')
    # plt.figlegend([f'Fold {i}' for i in range(len(data))], loc='upper right')
    # plt.show()
    plt.savefig(filename)
    plt.clf()

def make_eval_graph(data2, legend, filename, title, xlabel, ylabel):
    plt.ylabel(ylabel)
    plt.xlabel(xlabel)
    plt.title(title)
    plt.ylim([0, 1])

    t = [i for i in range(len(data2[0]))]
    for i in range(len(data2)):
        plt.plot(t, data2[i])
    # plt.plot(data)
    # plt.plot(validationLoss)
    # plt.figlegend(['Train', 'Test'], loc='upper left')
    # plt.figlegend([f'Fold {i}' for i in range(len(data))], loc='upper right')
    plt.figlegend(legend, loc='upper left')
    # plt.show()
    plt.savefig(filename)
    plt.clf()



# customTrain = [0.4142109184550361, 0.6188975204033674, 0.6952915678484936, 0.7350244205193917, 0.7621654492196944, 0.7836759730602014, 0.8008609831678227, 0.8156156602951736, 0.8261111787381712, 0.8353727556251522, 0.8432290984206743, 0.8528789817868422, 0.8581395355905805, 0.8623950984091016, 0.8684748316212639, 0.8761243180626149, 0.876183877553416, 0.8813746934757593, 0.8850766609992016, 0.9019260165007892]
# customEval = [0.42709600427073907, 0.524460538067385, 0.5785788744675953, 0.608609454892566, 0.6374145134865069, 0.6419336978924751, 0.6636586511207282, 0.6677490948035292, 0.679621005830508, 0.686780897061677, 0.6900573043874917, 0.685101053223927, 0.6796152912725915, 0.7046303251465289, 0.7057802554264652, 0.7144421910448733, 0.7039993849239498, 0.7112072829716036, 0.7073623107793038, 0.7192676738041137]

# regTrain = [0.41138731697318953, 0.6179958149766459, 0.6985423764402593, 0.7396135514332564, 0.7703172631057482, 0.7908389455632092, 0.8061481043706259, 0.8182113699454806, 0.8288065105772937, 0.8391981526547491, 0.8459742917593739, 0.8529060862880983, 0.8605904584120457, 0.8671975749016017, 0.8725912486113498, 0.875754705015643, 0.8798436566079542, 0.8844290635166373, 0.8871118676700139, 0.9034052247215254]
# regEval = [0.42797385290425555, 0.5232760987520009, 0.5954469025145291, 0.6281424298420487, 0.6491221006232696, 0.6735115317982145, 0.6695864207784843, 0.681401144376213, 0.6873153781417409, 0.7029142918402908, 0.702247905507754, 0.6971033836852619, 0.7049593490192407, 0.7139779333318644, 0.7179547889799848, 0.7218354127824508, 0.7155964434920637, 0.7250546292552268, 0.7241661950240992, 0.7330201110094259]

# fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
# # Plot the lines on their respective subplots
# ax2.plot(customTrain, label='Train')
# ax2.plot(customEval, label='Eval')

# ax1.plot(regTrain, label='Train')
# ax1.plot(regEval, label='Eval')

# ax1.set_ylim([0,1])
# ax2.set_ylim([0,1])


# # Basic configurations
# ax2.set_title('mGTS')
# ax2.set_xlabel('Epoch')
# ax2.set_ylabel('Token Accuracy')
# ax2.legend()

# ax1.set_title('GTS')
# ax1.set_xlabel('Epoch')
# ax1.set_ylabel('Token Accuracy')
# ax1.legend()

# # Automatically adjust the layout for better appearance
# plt.tight_layout()

# # Display the plots
# plt.show()


# make_eval_graph([[0.15628328857689922, 0.28491002593809744, 0.385715355653435, 0.3879291866104376, 0.40358754991043344, 0.4212996371754644, 0.429886578105461, 0.4507122619159817, 0.46460867226261937, 0.4431457522702432, 0.4446419026178261, 0.4757503172959281, 0.5170988161728428, 0.5309882654933158, 0.5212742799093373, 0.5654208796304807, 0.5472788269315232, 0.5735176937069981, 0.6055430414221158, 0.5704623016947252], [0.0, 0.0, 0.09578109277301995, 0.20184042659747065, 0.21808672483101266, 0.2225304896297146, 0.23836408015842697, 0.22607313335398915, 0.24510758787115053, 0.25772021569181286, 0.23198994139625875, 0.25063262638773653, 0.24279027006092446, 0.26237967693305314, 0.26051167654187884, 0.2480003111649718, 0.2666016657926191, 0.25695366729255276, 0.2382964535664101, 0.25437209123536697]], ['Train', 'Eval'], 'mGTS.png', 'mGTS on DRAW-1K', 'Epoch', 'Token Accuracy')